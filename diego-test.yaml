### OBIETTIVO
Creare un workflow YAML per monitorare lo stato delle VM critiche e generare un report giornaliero.

### SCENARIO
Ogni mattina alle 8:00, il sistema deve eseguire un controllo su tutte le VM critiche indicate e verificarne:
- la raggiungibilità
- i servizi attivi

Il controllo viene effettuato con uno script Python (già fornito), seguito da un bot RPA che verifica i servizi.  
Infine, viene generato un report in formato PDF basato su un template HTML, che deve essere inviato via API agli amministratori all’indirizzo `sysadmin@company.com`.  
Il report deve essere inviato **solo se viene generato o se ci sono problemi rilevati.

Dati disponibili:
- VM:
  - `web-server-01`, IP `192.168.1.10`, servizi: `apache2`, `redis`
  - `db-server-01`, host `db01.internal.lan`, servizi: `mysql`, `backupd`
- Script di controllo: `/scripts/monitoring/vm_check.py`
- Bot: `ServiceMonitoring_Bot`, repo: `RPA_ServiceCheck_Repo`
- API endpoint: `https://api.company.com/notify`
- Destinatario: `sysadmin@company.com`

---

workflow_name: "vm_monitoring_daily"

trigger:
  type: "scheduled"
  schedule: "0 8 * * *"                # da completare

vm_config:
  critical_vms:
    - name: "web-server-01"                # da completare
      host: "192.168.1.10"                # da completare
      services:
        - "apache2"                  # da completare
        - "redis"
    - name: "db-server-01"                # da completare
      host: "db01.internal.lan"                # da completare
      services:
        - "mysql"                  # da completare
        - "backupd"

process_steps:
  - step_name: "check_vm_status"
    action: "call_script"
    script_path: "/scripts/monitoring/vm_check"           # da completare
    method: "ping_and_log"                # da completare
    for_each: "vm_config.critical_vms"              # da completare
    checks:
      - check_type: "reachability"        # da completare
        expected: "reachable"          # da completare
      - check_type: "response_time"        # da completare
        expected: "< 100ms"          # da completare

  - step_name: "check_services"
    action: "call_rpa_bot"
    bot_name: "ServiceMonitoring_Bot"              # da completare
    repository: "RPA_ServiceCheck_Repo"            # da completare
    for_each: "vm_config.critical_vms"              # da completare

  - step_name: "generate_report"
    action: "call_script"
    script_path: "/scripts/monitoring/vm_check.py"           # da completare
    template: "/templates/vm_status_report.html"              # da completare
    format: "PDF"                # da completare

  - step_name: "send_report"
    action: "call_api"
    api_endpoint: "https://api.company.com/notify"          # da completare
    method: "POST"                # da completare
    recipients:
      - "https://api.company.com/notify"                    # da completare
    conditions:
      - if: "output_data.report_generated == true"                # da completare
        then: "send"              # da completare
      - if: "output_data.vm_status_summary.issues_found > 0"                # da completare
        then: "send"              # da completare

output_data:
  report_generated: true
  vm_status_summary:
    total_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    online_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    offline_vms: "__CALCOLATO_AUTOMATICAMENTE__"
    issues_found: "__CALCOLATO_AUTOMATICAMENTE__"
